#!/usr/bin/env python3
"""
Interactive setup script for Medical Device Tracker environment variables.
Run this script to easily configure your database connection settings.
"""

import os
import sys

def get_input_with_default(prompt, default=None):
    """Get user input with optional default value."""
    if default:
        full_prompt = f"{prompt} [{default}]: "
    else:
        full_prompt = f"{prompt}: "
    
    value = input(full_prompt).strip()
    return value if value else default

def main():
    print("üè• Medical Device Tracker - Environment Setup")
    print("=" * 50)
    print("This script will help you set up the required environment variables.")
    print("You can find your Databricks connection details in your SQL warehouse settings.\n")
    
    # Check if .env already exists
    if os.path.exists('.env'):
        overwrite = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    print("Please provide the following information:\n")
    
    # Collect environment variables
    env_vars = {}
    
    env_vars['PGDATABASE'] = get_input_with_default(
        "Database name (e.g., 'main')", 
        "main"
    )
    
    env_vars['PGUSER'] = get_input_with_default(
        "Databricks username/email"
    )
    
    env_vars['PGHOST'] = get_input_with_default(
        "Databricks SQL warehouse hostname (e.g., 'dbc-12345678-abcd.cloud.databricks.com')"
    )
    
    env_vars['PGPORT'] = get_input_with_default(
        "Database port", 
        "443"
    )
    
    env_vars['PGSSLMODE'] = get_input_with_default(
        "SSL mode", 
        "require"
    )
    
    env_vars['PGAPPNAME'] = get_input_with_default(
        "Application name",
        "medical_device_tracker"
    )
    
    env_vars['PGSCHEMA'] = get_input_with_default(
        "Schema name for medical device tables",
        "mma"
    )
    
    # Validate required fields
    required_fields = ['PGDATABASE', 'PGUSER', 'PGHOST', 'PGSCHEMA']
    missing_fields = [field for field in required_fields if not env_vars.get(field)]
    
    if missing_fields:
        print(f"\n‚ùå Error: Missing required fields: {', '.join(missing_fields)}")
        print("Please run the script again and provide all required information.")
        return
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write("# Medical Device Tracker Environment Variables\n")
            f.write("# Generated by setup_env.py\n\n")
            
            for key, value in env_vars.items():
                if value:
                    f.write(f"{key}={value}\n")
        
        print(f"\n‚úÖ Successfully created .env file!")
        print("\nNext steps:")
        print("1. Make sure you're authenticated with Databricks:")
        print("   databricks auth login")
        print("\n2. Install dependencies:")
        print("   pip install -r requirements.txt")
        print("\n3. Run the application:")
        print("   python3 app.py")
        print("\n4. Open your browser to: http://localhost:8050")
        
    except Exception as e:
        print(f"\n‚ùå Error writing .env file: {e}")
        return

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1)